Team: (Name, UNI)
Pei-Huan Tsai, pt2630

Requirement:
The code generator generates code for accelerator designs that can be integrated into an SoC using ESP, an open-source SoC platform.
ESP installation (https://www.esp.cs.columbia.edu/docs/setup/setup-guide/)

Since ESP installation will take a lot of time, please just take a look at the video to see how the generated code works.

Video demo:
https://youtu.be/17vUWnBCNHs

Work flow: 
1. The compiler framework generates Python programs.
2. We execute the generated Python program to modify the template and get those accelerator code.
3. We copy the code into corresponding places under the ESP.
4. SoC generation (In theory, we could proceed to bitstream generation and run the applications mentioned in the proposal on FPGAs. However, to save time, the demo focuses on demonstrating the behavioral simulation results to showcase the feasibility of the workflow.)





How to compile and run the program: (corresponds to the work flow mention above)
1. 
==== generate ast ====
make clean;make ast-files, or 
bash test_all.sh    --> recommended
==== code generation ====
make code-gen

2. 
make code-exec

3. 
make install, or 
manually copy the code you want

4. 
move the huangemmplt_stratus into the ESP folder: "esp/accelerators/stratus_hls/.", where esp is the folder of your esp installation
execute "make huangemmplt_stratus-exe" to perform behavioral simulation

all.
Otherwise, you can execure "bash run_all.sh", which execute the steps from one to three.
For the fourth step, please see the video demo to save time.

****** note that "make code-gen" will raise an error as we have semantic errors in the fifth program. The behavior is expected *****



=== Different input files and what is their purpose of testing ===
1. example_inputs/simple1.hl: test the registration command, this is the simplest program
2. example_inputs/simple2.hl: show the programmability of language (if-else structure, and the generated hardware code is correct)
3. example_inputs/simple3.hl: Another programmability of language (while structure, generates 2 sets of hardware code)
4. example_inputs/simple4.hl: constant propagation and dead code elimination
5. example_inputs/simple5.hl: uninitialized variable, which will cause an error





======== files =======
scanner.cpp: source code of the scanner
tph_parser.py: source code of the parser
example_inputs/*.hl: programs using my own language
test_all.sh: shell scripts to execute all commands until parser, generating asts
run_all.sh: shell scripts for the whole execution of the compiler flow
Makefile: some targets to use

======== generated files =======
tokenized_inputs/*.txt: files generated by the scanner program
ast_outputs/*.txt: AST generated bu the parser

code_generation/test*/generator.py: codes generated by the code generator
code_generation/test*/FC_*: hardware code
code_template: hardware code template
huangemmplt_stratus/: accelerator template that can be modified and installed into ESP
 




